<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Check Campus Status</title>
    <link rel="icon" href="/favicon.ico" type="image/png">
    <script src="https://cdn.tailwindcss.com"></script>
	<script src="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.0.3"></script>
	<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
</head>

<body class="bg-gradient-to-br from-gray-900 to-gray-800 flex flex-col items-center justify-center min-h-screen p-4 text-white">
    <nav class="bg-gray-900 text-white p-4 shadow-lg fixed top-0 left-0 right-0 z-50">
        <div class="container mx-auto flex justify-between items-center">
            <a href="/" class="text-lg font-bold">42_Friend</a>
			<div class="text-center">
                Active Users: <%= totalActiveUser %>
            </div>
            <div class="space-x-6 flex items-center">
                <a href="/about" class="hover:text-blue-400">About Me</a>
                <a href="/" class="hover:text-blue-400">Home</a>
                <a href="/fetch-users" class="hover:text-blue-400" onclick="showLoading()">Peers</a>
                <a href="/logout" class="text-red-400 hover:text-red-600">Logout</a>
                <a href="https://github.com/rameshtim/42_friend" target="_blank" class="bg-gray-800 px-4 py-2 rounded-lg flex items-center hover:bg-blue-500 transition">
                    <i class="ph ph-github-logo text-xl mr-2"></i>Contribute
                </a>
            </div>
        </div>
    </nav>

    <div class="pt-20 w-full max-w-5xl">
        <div class="bg-gray-700 shadow-xl rounded-lg p-6 w-full">
            <div class="flex flex-col md:flex-row items-start space-y-6 md:space-x-8">
                <!-- Current User Section -->
                <div class="w-full md:w-1/3 bg-gray-800 p-6 rounded-lg shadow-md">
                    <h1 class="text-2xl font-bold text-center">Welcome, <%= user.displayname %>!</h1>
                    <div class="flex justify-center my-4">
                        <div class="inline-block border-4 border-gray-600 rounded-lg">
                            <img class="w-32 h-32 object-cover rounded-lg" src="<%= user.image.versions.medium %>" alt="Your Profile Picture">
                        </div>
                    </div>
                    <div id="loadingIndicator" class="hidden text-center my-4">
                        <div class="animate-spin rounded-full h-10 w-10 border-t-4 border-blue-500 mx-auto"></div>
                        <p class="text-gray-400 mt-2">Loading peers...</p>
                    </div>
					<button id="findPeersButton" onclick="fetchUsers()" class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg mt-3 transition text-center block">
						Find Online Peers
					</button>					
					
                    <div class="w-full bg-gray-800 p-6 rounded-lg shadow-md">
						<form action="/fetch-users-campus" method="POST" class="mt-4 space-y-4" id="fetchUsersForm">
							<button type="button" onclick="toggleAdvancedSearch()" 
									class="w-full bg-yellow-700 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded-lg transition flex items-center justify-center">
								Advanced Search
							</button>
							
					
							<!-- Advanced Search Section (Hidden by Default) -->
							<div id="advancedSearch" class="hidden space-y-4">
								<!-- Searchable Campus Selection -->
								<div x-data="{ search: '', campuses: [
									{ id: 43, name: 'Abu Dhabi' },
									{ id: 36, name: 'Adelaide' },
									{ id: 14, name: 'Amsterdam' },
									{ id: 31, name: 'Angouleme' },
									{ id: 35, name: 'Amman' },
									{ id: 65, name: 'Antananarivo' },
									{ id: 46, name: 'Barcelona' },
									{ id: 71, name: 'Beirut' },
									{ id: 61, name: 'Belo Horizonte' },
									{ id: 21, name: 'Benguerir' },
									{ id: 51, name: 'Berlin' },
									{ id: 33, name: 'Bangkok' },
									{ id: 54, name: '42 Central' },
									{ id: 42, name: '42Network' },
									{ id: 52, name: 'Florence' },
									{ id: 66, name: 'Forty2' },
									{ id: 69, name: 'Gyeongsan' },
									{ id: 39, name: 'Heilbronn' },
									{ id: 13, name: 'Helsinki' },
									{ id: 49, name: 'Istanbul' },
									{ id: 73, name: 'IskandarPuteri' },
									{ id: 50, name: 'Kocaeli' },
									{ id: 16, name: 'Khouribga' },
									{ id: 34, name: 'Kuala Lumpur' },
									{ id: 47, name: 'Lausanne' },
									{ id: 62, name: 'Le Havre' },
									{ id: 38, name: 'Lisboa' },
									{ id: 57, name: 'London' },
									{ id: 68, name: 'Luanda' },
									{ id: 59, name: 'Luxembourg' },
									{ id: 9, name: 'Lyon' },
									{ id: 22, name: 'Madrid' },
									{ id: 37, name: 'Malaga' },
									{ id: 72, name: 'Milano' },
									{ id: 48, name: 'Mulhouse' },
									{ id: 70, name: 'Nablus' },
									{ id: 41, name: 'Nice' },
									{ id: 1, name: 'Paris' },
									{ id: 74, name: 'Penang' },
									{ id: 60, name: 'Perpignan' },
									{ id: 58, name: 'Porto' },
									{ id: 56, name: 'Prague' },
									{ id: 25, name: 'Quebec' },
									{ id: 75, name: 'Rabat' },
									{ id: 28, name: 'Rio de Janeiro' },
									{ id: 30, name: 'Rome' },
									{ id: 20, name: 'São-Paulo' },
									{ id: 29, name: 'Seoul' },
									{ id: 64, name: 'Singapore' },
									{ id: 55, name: 'Tétouan' },
									{ id: 26, name: 'Tokyo' },
									{ id: 40, name: 'Urduliz' },
									{ id: 53, name: 'Vienna' },
									{ id: 67, name: 'Warsaw' },
									{ id: 44, name: 'Wolfsburg' },
									{ id: 32, name: 'Yerevan' },
									{ id: 12, name: '19' }
								],
								userCampusId: <%= user.campus_id %>
							 }">
									<label for="campus_id" class="block text-white">Campus :</label>
									<select id="campus_id" name="campus_id" 
											class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg 
												   focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
										<template x-for="campus in campuses.filter(c => c.name.toLowerCase().includes(search.toLowerCase()))" :key="campus.id">
											<option :value="campus.id" x-text="campus.name" :selected="campus.id === userCampusId"></option>
										</template>
									</select>
								</div>
								<div>
									<label for="cursus_s" class="block text-white">Student Type:</label>
									<select id="cursus_s" name="cursus_s" required 
											class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg 
												   focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
										<option value="21" selected>Student</option>
										<option value="9">Piscine</option>
									</select>
								</div>
								<div>
									<label for="l_level" class="block text-white">Level:</label>
									<select id="l_level" name="l_level" required 
											class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg 
												   focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
										<option value="0" selected>0</option>
										<option value="1">1</option>
										<option value="2">2</option>
										<option value="3">3</option>
										<option value="4">4</option>
										<option value="5">5</option>
										<option value="6">6</option>
										<option value="7">7</option>
										<option value="8">8</option>
										<option value="9">9</option>
										<option value="10">10</option>
									</select>
								</div>

								
								<!-- Upper Level Selection -->
								<div>
									<label for="u_level" class="inline-flex items-center text-white">Upper Level (optional):
										<div class="relative group ml-11">
											<div class="flex items-center justify-center">
												<span class="text-gray-400 cursor-help">ℹ️ Info</span>
											</div>
											<div class="absolute hidden group-hover:block w-64 p-2 bg-gray-600 text-white text-sm rounded-lg -mt-2 left-1/2 transform -translate-x-1/2">
												To find all active users of a selected campus, please select Level as 0 and Upper Level as 10+
											</div>
										</div>
									</label>
									<select id="u_level" name="u_level" 
											class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg 
												   focus:outline-none focus:ring-2 focus:ring-blue-500 text-white">
										<option value="" selected>Any</option>
										<option value="1">1</option>
										<option value="2">2</option>
										<option value="3">3</option>
										<option value="4">4</option>
										<option value="5">5</option>
										<option value="6">6</option>
										<option value="7">7</option>
										<option value="8">8</option>
										<option value="9">9</option>
										<option value="100">10+</option>
									</select>
								</div>

					
							<!-- Submit Button -->
								<button type="submit" id="findPeersButton1" onclick="showLoading()"
										class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition">
									Find Peers
								</button>
							</div>
						</form>
					</div>					
					
                </div>

                <!-- Search User Section -->
				<div class="w-full md:w-2/3 bg-gray-800 p-6 rounded-lg shadow-md">
					<h2 class="text-xl font-semibold text-center">Check Your Friend's Campus Status</h2>
					<form action="/check-user" method="POST" class="mt-4" id="userForm" onsubmit="return startLoading()">
						<label for="username" class="block">Enter 42 Username:</label>
						<input type="text" name="username" id="username" required pattern="[a-z]+" 
							title="Only lowercase letters (a-z) are allowed." 
							class="w-full px-3 py-2 bg-gray-600 border border-gray-500 rounded-lg 
								   focus:outline-none focus:ring-2 focus:ring-blue-500">
						<input type="hidden" name="localTime" id="localTime">
						<button type="submit" id="submitButton" 
							class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 
								   rounded-lg mt-3 transition">
							Check Status
						</button>
					</form>
				
					<!-- Loader: Hidden by Default -->
					<div id="loadingSpinner" class="hidden flex justify-center items-center mt-4">
						<div class="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500 border-solid"></div>
						<p class="ml-3 text-white font-semibold">Fetching Data...</p>
					</div>

                    <% if (searchedUser) { %>
                    <div class="mt-6 p-4 bg-gray-700 rounded-lg shadow-inner">
                        <h3 class="text-lg font-semibold">Result for <%= searchedUser.displayname %>:</h3>
                        <div class="flex justify-center my-2">
                            <div class="inline-block border-2 border-gray-500 rounded-lg">
                                <img class="w-32 h-32 object-cover rounded-lg" src="<%= searchedUser.image.versions.large %>" alt="User Profile Picture">
                            </div>
                        </div>
						<% if (searchedUser.location !== null) { %>
							<p class="text-green-400 font-semibold text-center text-lg">
								✅ <%= searchedUser.displayname %> (Level: <%= level %>) is currently on campus since <%= formatted_time %> !
							</p>
							<p class="text-white font-semibold text-center mt-2"> 
								<span class="underline">Current Project(s):</span> 
							</p>
							<ul class="mt-1 text-center">
								<% projectsInfo.split(', ').forEach(project => { %>
									<% let statusColor = project.includes("in_progress") ? "text-green-400" : 
														project.includes("searching_a_group") ? "text-yellow-400" : 
														"text-blue-400"; %>
									<li class="<%= statusColor %> font-medium">
										🔹 <%= project %>
									</li>
								<% }); %>
							</ul>
						<% } else { %>
							<p class="text-red-400 font-semibold text-center text-lg">
								❌ <%= searchedUser.displayname %> (Level: <%= level %>) is not on campus.
							</p>
							<p class="text-white font-semibold text-center mt-2"> 
								<span class="underline">Current Project(s):</span> 
							</p>
							<ul class="mt-1 text-center">
								<% projectsInfo.split(', ').forEach(project => { %>
									<% let statusColor = project.includes("in_progress") ? "text-green-400" : 
														project.includes("searching_a_group") ? "text-yellow-400" : 
														"text-blue-400"; %>
									<li class="<%= statusColor %> font-medium">
										🔹 <%= project %>
									</li>
								<% }); %>
							</ul>
							<p class="text-gray-400 italic text-center mt-2">
								<% if (typeof black_holed === 'string' && black_holed.length > 0) { %>
								  <% if (days_ago > 2) { %>
									(Last Seen: <%= last_seen %>, <%= days_ago %> days ago at <%= formatted_time %> and Absorbed by black hole on <%= black_holed %>)
								  <% } else { %>
									(Last Seen: <%= last_seen %> at <%= formatted_time %> and Absorbed by black hole on <%= black_holed %>)
								  <% } %>
								<% } else { %>
								  <% if (days_ago > 2) { %>
									(Last Seen: <%= last_seen %>, <%= days_ago %> days ago at <%= formatted_time %>)
								  <% } else { %>
									(Last Seen: <%= last_seen %> at <%= formatted_time %>)
								  <% } %>
								<% } %>
							</p>
						<% } %>						
                    </div>
					<div>
						<h3 class="mt-4 text-lg font-semibold">Send Email Notification</h3>
						<form action="/send-email" method="POST" class="mt-2">
							<input type="hidden" name="username" value="<%= searchedUser.login %>">
							<input type="hidden" name="displayname" value="<%= searchedUser.displayname %>">
							<input type="hidden" name="reqUsername" value="<%= user.displayname %>">
							<input type="hidden" name="email" value="<%= user.email %>">
							<input type="hidden" name="searchedUserEmail" value="<%= searchedUser.email %>">
							<input type="hidden" name="location" value="<%= searchedUser.location %>">
							<input type="hidden" name="accessToken" value="<%= user.access_token %>">
		
							<label for="duration">Monitor for:</label>
							<select name="duration" id="1duration" class="bg-gray-700 text-white p-2 rounded-lg">
								<option value="30min">30 Minutes</option>
								<option value="1hour" selected>1 Hour</option>
								<option value="2hours">2 Hours</option>
								<option value="4hours">4 Hours</option>
							</select>
				<br>
				<br>
							<label for="intervall">Every______:</label>
							<select name="intervall" id="intervall" class="bg-gray-700 text-white p-2 rounded-lg">
								<option value="1min">1 Minute</option>
								<option value="5min" selected>5 Minutes</option>
								<option value="10min">10 Minutes</option>
							</select>
							<div class="flex items-center mt-2">
								<input type="checkbox" name="sendEmail" value="on" id="sendEmail" class="mr-2">
								<label for="sendEmail">📧 Send me an email</label>
							</div>
							<div class="flex items-center mt-2">
								<input type="checkbox" name="alsoSendEmail" value="on" id="alsoSendEmail" class="mr-2">
								<label for="alsoSendEmail">📤 Send this person also an email</label>
							</div>
							<button type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg mt-3 transition">Start Monitoring</button>
						</form>
					</div>
                    <% } %>
                </div>
            </div>

            <!-- Monitoring Section -->
            <div class="mt-6 p-4 bg-gray-700 rounded-lg shadow-inner">
                <h3 class="text-lg font-semibold">Currently Monitored Users</h3>
                <ul id="monitoredUsersList" class="mt-2 space-y-2">
                    <% if (activeMonitors.length === 0) { %>
                    	<p class="text-gray-400">No active monitoring sessions.</p>
                    <% } else { %>
						<% activeMonitors.forEach(username => { %>
							<li class="flex justify-between items-center bg-gray-800 p-2 rounded-lg shadow">
								<span><%= username %></span>
								<button onclick="stopMonitoring('<%= username %>')" class="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-lg">
									Stop
								</button>
							</li>
						<% }) %>
                    <% } %>
                </ul>
            </div>

            <!-- Live Notifications Section -->
            <div class="mt-6 p-4 bg-gray-700 rounded-lg shadow-inner">
                <h3 class="text-lg font-semibold">Live Notifications</h3>
                <ul id="notificationList" class="mt-2 space-y-2"></ul>
            </div>

            <!-- Logout -->
            <div class="text-center mt-6">
                <a href="/logout" class="text-red-400 font-semibold hover:underline">Logout</a>
            </div>
        </div>
    </div>

	<script>
		let notificationInterval; // Store interval ID

		document.addEventListener("DOMContentLoaded", () => {
			const urlParams = new URLSearchParams(window.location.search);
			const message = urlParams.get("message");
			const error = urlParams.get("error");

			if (message) {
				showPopup(message, true);
			} else if (error) {
				showPopup(error, false);
			}

			if (message || error) {
				const newUrl = window.location.pathname; 
				window.history.replaceState({}, document.title, newUrl);
			}
			const activeMonitors = <%- typeof activeMonitors !== 'undefined' ? JSON.stringify(activeMonitors) : '[]' %>;
			if (activeMonitors.length > 0) {
				console.log("will start fetching notifications");
				startFetchingNotifications();
			}
			
			addCredentialsToLinks();
		});

		function toggleAdvancedSearch() {
			const advancedSearchSection = document.getElementById('advancedSearch'); //Example ID
			const button = document.getElementById('fetchUsersForm').querySelector('button'); //Grabs the button.

			advancedSearchSection.classList.toggle('hidden'); //Toggles the 'hidden' class.

			if (advancedSearchSection.classList.contains('hidden')) {
				// Section is hidden, chevron should point down
				button.innerHTML = `
				
				Advanced Search
				`;
			} else {
				// Section is visible, chevron should point up or an 'x' should appear.
				button.innerHTML = `
				<svg class="w-5 h-5 inline mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8l-4 4-4-4M16 16l-4-4-4 4"></path>
				</svg>
				Advanced Search
				`;
			}
		}

		function addCredentialsToLinks() {
			const links = document.querySelectorAll('a');
			
			links.forEach(link => {
				// Skip external links or links with target="_blank"
				if (link.getAttribute('target') === '_blank' || link.href.startsWith('http') && !link.href.includes(window.location.hostname)) {
					return;
				}
				
				// Handle internal links
				link.addEventListener('click', function(e) {
					e.preventDefault();
					
					const href = this.getAttribute('href');
					
					// Skip if it's a JavaScript function or empty href
					if (!href || href === '#' || href.startsWith('javascript:')) {
						return;
					}
					
					fetch(href, {
						method: 'GET',
						credentials: 'include',
					})
					.then(response => {
						if (response.headers.get('content-type')?.includes('text/html')) {
							window.location.href = href;
						} else {
							return response.json().then(data => {
								// Handle JSON response if needed
								console.log('Received data:', data);
								window.location.href = href;
							});
						}
					})
					.catch(error => {
						console.error('Navigation error:', error);
						// Fallback to regular navigation if fetch fails
						window.location.href = href;
					});
				});
			});
		}

		async function stopMonitoring(username) {
			try {
				const response = await fetch("/stop-monitoring", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					credentials: 'include',
					body: JSON.stringify({ username })
				});

				const data = await response.json();
				showPopup(data.message, data.success);

				if (data.success) {
					// Remove user from the UI
					document.location.reload(); // Refresh page to update monitored list
				}
			} catch (error) {
				showPopup("Failed to stop monitoring", false);
			}
		}

		function checkInput(input) {
			const regex = /^[a-z]*$/;

			if (!regex.test(input.value)) {
				showPopup("Only lowercase letters (a-z) are allowed!", false);
				input.value = input.value.replace(/[^a-z]/g, ""); // Remove invalid characters
			}
		}

		function validateUsername() {
			const input = document.getElementById("username");
			const regex = /^[a-z]+$/;

			if (!regex.test(input.value)) {
				showPopup("Only lowercase letters (a-z) are allowed!", false);
				return false;
			}
			return true;
		}
		
		function showPopup(message, success) {
			const popup = document.createElement("div");
			popup.innerText = message;

			popup.className = `fixed top-20 right-5 p-4 rounded-lg text-white shadow-lg transition-opacity duration-300 ease-in-out
		        ${success ? "bg-green-500" : "bg-red-500"} opacity-0 w-[90vw] sm:w-auto sm:max-w-[25vw] break-words z-50`;

      
			const closeButton = document.createElement("button");
			closeButton.innerText = "X";
			closeButton.className = "absolute top-1 right-1 text-white text-xl font-bold bg-transparent border-none cursor-pointer hover:text-gray-200";
			closeButton.onclick = () => {
				popup.classList.remove("opacity-100");
				setTimeout(() => popup.remove(), 300); // Fade out and remove
			};

			popup.appendChild(closeButton); 

			document.body.appendChild(popup);

			// Fade in effect
			setTimeout(() => {
				popup.classList.add("opacity-100");
			}, 50);

			// Remove after timeout
			setTimeout(() => {
				popup.classList.remove("opacity-100");
				setTimeout(() => popup.remove(), 300);
			}, 50000);
		}

		function fetchUsers() {
			showLoading();
			const userOffset = new Date().getTimezoneOffset();
			
			fetch("/fetch-users", {
				method: "GET",
				credentials: "include",
				headers: { "X-Timezone-Offset": userOffset.toString() }
			})
			.then(response => {
				if (response.redirected) {
				// If the server redirected us, follow that redirect
				window.location.href = response.url;
				} else if (response.ok) {
				// If response is HTML (the rendered peers.ejs), replace current page content
				response.text().then(html => {
					document.open();
					document.write(html);
					document.close();
				});
				}
			})
			.catch(error => console.error("Error fetching users:", error));
		}


		function showLoading() {
			document.getElementById("loadingIndicator").classList.remove("hidden"); // Show loading spinner
			document.getElementById("submitButton").classList.add("opacity-50", "cursor-not-allowed"); 
			document.getElementById("findPeersButton").classList.add("opacity-50", "cursor-not-allowed"); 
			document.getElementById("findPeersButton1").classList.add("opacity-50", "cursor-not-allowed"); // Disable button
		}

		async function fetchNotifications() {
			try {
				const response = await fetch(`/get-notifications?user=<%= user.login %>`, {
					credentials: 'include'
				});

				// If the server responds with an error, stop fetching
				if (!response.ok) {
					throw new Error(`Server error: ${response.status}`);
				}

				const notifications = await response.json();
				const notificationList = document.getElementById("notificationList");
				notificationList.innerHTML = ""; // Clear previous notifications

				notifications.forEach((notif) => {
					const li = document.createElement("li");
					li.textContent = `${notif.message} at ${notif.timestamp}`;
					li.className = "bg-gray-800 p-2 rounded-lg shadow";
					notificationList.appendChild(li);
				});

			} catch (error) {
				console.error("Failed to fetch notifications:", error);
				clearInterval(notificationInterval); // Stop polling if the server is down
				showPopup("Server is down. Stopping notifications.", false);
			}
		}

		function startFetchingNotifications() {
			if (notificationInterval) return; // Prevent multiple intervals
				
			notificationInterval = setInterval(fetchNotifications, 30000);
			fetchNotifications(); // Fetch immediately
		}
		function startLoading() {
			document.getElementById("userForm").classList.add("hidden");
			const localTime = new Date().getTimezoneOffset().toString();
			// Set the value of the hidden input field
			document.getElementById("localTime").value = localTime;
			
			document.getElementById("loadingSpinner").classList.remove("hidden");
			document.getElementById("findPeersButton").classList.add("opacity-50", "cursor-not-allowed"); // Disable button
			document.getElementById("findPeersButton1").classList.add("opacity-50", "cursor-not-allowed"); // Disable button
			
			return true;
		}
	</script>
</body>
</html>