<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>KidTube - Safe Video Player</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .thumbnail-container {
      transition: transform 0.2s;
    }
    .thumbnail-container:hover {
      transform: scale(1.05);
    }
    .yt-button {
      transition: background-color 0.2s;
    }
    .yt-button:hover {
      background-color: #cc0000 !important;
    }
  </style>
</head>
<body class="bg-gray-50 font-sans">
  <header class="bg-gray-900 text-white p-4 flex items-center justify-between">
    <h1 class="text-2xl md:text-3xl font-bold">KidTube</h1>
    <button id="toggleForm" class="bg-red-600 text-white px-4 py-2 rounded-md yt-button">Update Video Links</button>
  </header>

  <main class="container mx-auto p-4">
    <!-- Form -->
    <section id="videoFormSection" class="mb-8 bg-white p-6 rounded-lg shadow-md hidden">
      <h2 class="text-xl md:text-2xl font-semibold mb-4 text-gray-900">Update YouTube Video Links</h2>
      <form id="videoForm" class="grid grid-cols-1 gap-4">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <% for(let i = 1; i <= 6; i++) { %>
            <div>
              <label for="video<%= i %>" class="block text-sm font-medium text-gray-700">Thumbnail <%= i %></label>
              <input type="text" id="video<%= i %>" name="video<%= i %>" value="<%= videoLinks[`video${i}`] || '' %>" placeholder="YouTube Video URL" class="mt-1 p-2 w-full border rounded-md focus:ring-red-500 focus:border-red-500">
            </div>
          <% } %>
        </div>
        <button type="submit" class="mt-4 bg-red-600 text-white px-4 py-2 rounded-md yt-button">Save Videos</button>
      </form>
    </section>

    <!-- Thumbnails -->
    <section id="thumbnailSection" class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div class="thumbnail-container bg-white rounded-lg shadow-md overflow-hidden">
        <div id="thumbnail1" class="w-full h-48 bg-gray-200 flex items-center justify-center cursor-pointer"></div>
        <div class="p-4">
          <h3 class="text-lg font-semibold text-gray-900">Video 1</h3>
        </div>
      </div>
      <div class="thumbnail-container bg-white rounded-lg shadow-md overflow-hidden">
        <div id="thumbnail2" class="w-full h-48 bg-gray-200 flex items-center justify-center cursor-pointer"></div>
        <div class="p-4">
          <h3 class="text-lg font-semibold text-gray-900">Video 2</h3>
        </div>
      </div>
    </section>

    <!-- Next Button -->
    <section class="mt-4 text-center">
      <button id="nextPair" class="bg-red-600 text-white px-4 py-2 rounded-md yt-button">Next Videos</button>
    </section>

    <!-- Modal -->
    <div id="videoModal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden relative">
      <!-- Overlay to block pause suggestions -->
      <div id="videoOverlay" class="absolute top-0 left-0 w-full h-full z-50 hidden bg-black bg-opacity-60 cursor-pointer">
        <img id="overlayThumbnail" class="w-full h-full object-cover opacity-80" />
      </div>

      <!-- Close button -->
      <div class="w-full h-full">
        <div class="flex justify-end p-2">
          <button id="closeModal" class="text-white text-2xl hover:text-gray-300">Ã—</button>
        </div>
        <iframe id="videoPlayer" class="w-full h-[calc(100%-2.5rem)]" frameborder="0" allow="autoplay; encrypted-media; fullscreen" allowfullscreen></iframe>
      </div>
    </div>
  </main>

  <script>
    const defaultVideoLinks = {
      video1: 'https://www.youtube.com/watch?v=qXKsou9UmfY',
      video2: 'https://www.youtube.com/watch?v=bOiYN7iU-W8',
      video3: 'https://www.youtube.com/watch?v=Te6hlTrO0Bc',
      video4: 'https://www.youtube.com/watch?v=XqZsoesa55w',
      video5: 'https://www.youtube.com/watch?v=kHsUL-3BFr4',
      video6: 'https://www.youtube.com/watch?v=7JurLOWlaBs'
    };

    let videoLinks = JSON.parse(localStorage.getItem('videoLinks')) || defaultVideoLinks;
    localStorage.setItem('videoLinks', JSON.stringify(videoLinks));

    let currentPair = 0;

    function getYouTubeID(url) {
      const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
      const match = url.match(regExp);
      return (match && match[2].length === 11) ? match[2] : null;
    }

    function updateThumbnails() {
      const startIndex = currentPair * 2 + 1;
      for (let i = 1; i <= 2; i++) {
        const thumbnail = document.getElementById(`thumbnail${i}`);
        const videoIndex = startIndex + i - 1;
        const videoId = getYouTubeID(videoLinks[`video${videoIndex}`]);
        if (videoId) {
          thumbnail.innerHTML = `<img src="https://img.youtube.com/vi/${videoId}/hqdefault.jpg" class="w-full h-full object-cover">`;
        } else {
          thumbnail.innerHTML = `Thumbnail ${videoIndex}`;
        }
        thumbnail.dataset.videoIndex = videoIndex;
      }
    }

    updateThumbnails();

    document.getElementById('videoForm').addEventListener('submit', (e) => {
      e.preventDefault();
      for (let i = 1; i <= 6; i++) {
        const url = document.getElementById(`video${i}`).value;
        videoLinks[`video${i}`] = url || defaultVideoLinks[`video${i}`];
      }
      localStorage.setItem('videoLinks', JSON.stringify(videoLinks));
      updateThumbnails();
      document.getElementById('videoFormSection').classList.add('hidden');
      alert('Video links updated!');
    });

    document.getElementById('toggleForm').addEventListener('click', () => {
      document.getElementById('videoFormSection').classList.toggle('hidden');
    });

    document.getElementById('nextPair').addEventListener('click', () => {
      currentPair = (currentPair + 1) % 3;
      updateThumbnails();
    });

    for (let i = 1; i <= 2; i++) {
		document.getElementById(`thumbnail${i}`).addEventListener('click', () => {
			const videoIndex = document.getElementById(`thumbnail${i}`).dataset.videoIndex;
			const videoUrl = videoLinks[`video${videoIndex}`];
			const videoId = getYouTubeID(videoUrl);
			if (videoId) {
			const player = document.getElementById('videoPlayer');
			const modal = document.getElementById('videoModal');

			player.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&loop=1&playlist=${videoId}&modestbranding=1&rel=0&showinfo=0&controls=1&enablejsapi=1`;
			modal.classList.remove('hidden');

			// Request fullscreen
			if (modal.requestFullscreen) {
				modal.requestFullscreen();
			} else if (modal.webkitRequestFullscreen) {
				modal.webkitRequestFullscreen();
			} else if (modal.msRequestFullscreen) {
				modal.msRequestFullscreen();
			}

			// Notify YouTube iframe we want API events
			player.onload = () => {
				player.contentWindow.postMessage(JSON.stringify({
				event: "listening",
				id: "player1"
				}), "*");
			};
			}
		});
	}


    document.getElementById('closeModal').addEventListener('click', () => {
      document.getElementById('videoModal').classList.add('hidden');
      document.getElementById('videoPlayer').src = '';
      if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {
        if (document.exitFullscreen) document.exitFullscreen();
        else if (document.webkitExitFullscreen) document.webkitExitFullscreen();
        else if (document.msExitFullscreen) document.msExitFullscreen();
      }
    });

    // Handle YouTube player state changes
    window.addEventListener("message", (event) => {
      try {
        const data = JSON.parse(event.data);
        const overlay = document.getElementById("videoOverlay");
        const thumbnail = document.getElementById("overlayThumbnail");

        if (data.event === "onStateChange") {
          const player = document.getElementById("videoPlayer");
          const videoId = getYouTubeID(player.src);

          if (data.info === 2) { // paused
            overlay.classList.remove("hidden");
            thumbnail.src = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;
          } else if (data.info === 1) { // playing
            overlay.classList.add("hidden");
          }
        }
      } catch (e) {
        // ignore parsing errors
      }
    });

    // Resume playback on overlay click
    document.getElementById("videoOverlay").addEventListener("click", () => {
      const player = document.getElementById("videoPlayer");
      player.contentWindow.postMessage(JSON.stringify({
        event: "command",
        func: "playVideo",
        args: []
      }), "*");
    });
  </script>
</body>
</html>