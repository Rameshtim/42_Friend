<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>KidTube - Safe Video Player</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .thumbnail-container {
      transition: transform 0.2s;
    }
    .thumbnail-container:hover {
      transform: scale(1.05);
    }
    .yt-button {
      transition: background-color 0.2s;
    }
    .yt-button:hover {
      background-color: #cc0000 !important;
    }
    #videoModal {
      z-index: 1000; /* Ensure modal is above all other content */
    }
  </style>
</head>
<body class="bg-gray-50 font-sans">
  <header class="bg-gray-900 text-white p-4 flex items-center justify-between">
    <h1 class="text-2xl md:text-3xl font-bold">KidTube</h1>
    <button id="toggleForm" class="bg-red-600 text-white px-4 py-2 rounded-md yt-button">Update Video Links</button>
  </header>

  <main class="container mx-auto p-4">
    <!-- Form Section -->
    <section id="videoFormSection" class="mb-8 bg-white p-6 rounded-lg shadow-md hidden">
      <div class="mb-6">
        <h3 class="text-lg font-semibold mb-2">Search for a Video</h3>
        <div class="flex flex-col md:flex-row gap-4 mb-3">
          <input id="searchInput" type="text" placeholder="Search YouTube..." class="flex-1 p-2 border rounded-md focus:ring-red-500 focus:border-red-500" />
          <select id="targetSlot" class="p-2 border rounded-md">
            <% for (let i = 1; i <= 6; i++) { %>
              <option value="video<%= i %>">Assign to Thumbnail <%= i %></option>
            <% } %>
          </select>
          <button onclick="searchYouTube()" type="button" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">Search</button>
        </div>
        <div id="searchResults" class="grid grid-cols-1 md:grid-cols-2 gap-4"></div>
      </div>

      <h2 class="text-xl md:text-2xl font-semibold mb-4 text-gray-900">Update YouTube Video Links</h2>
      <form id="videoForm" class="grid grid-cols-1 gap-4">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <% for(let i = 1; i <= 6; i++) { %>
            <div>
              <label for="video<%= i %>" class="block text-sm font-medium text-gray-700">Thumbnail <%= i %></label>
              <input type="text" id="video<%= i %>" name="video<%= i %>" value="<%= videoLinks[`video${i}`] || '' %>" placeholder="YouTube Video URL" class="mt-1 p-2 w-full border rounded-md focus:ring-red-500 focus:border-red-500">
            </div>
          <% } %>
        </div>
        <button type="submit" class="mt-4 bg-red-600 text-white px-4 py-2 rounded-md yt-button">Save Videos</button>
      </form>
    </section>

    <!-- Thumbnails -->
    <section id="thumbnailSection" class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div class="thumbnail-container bg-white rounded-lg shadow-md overflow-hidden">
        <div id="thumbnail1" class="w-full h-48 bg-gray-200 flex items-center justify-center cursor-pointer"></div>
        <div class="p-4"><h3 class="text-lg font-semibold text-gray-900">Video 1</h3></div>
      </div>
      <div class="thumbnail-container bg-white rounded-lg shadow-md overflow-hidden">
        <div id="thumbnail2" class="w-full h-48 bg-gray-200 flex items-center justify-center cursor-pointer"></div>
        <div class="p-4"><h3 class="text-lg font-semibold text-gray-900">Video 2</h3></div>
      </div>
    </section>

    <!-- Next Button -->
    <section class="mt-4 text-center">
      <button id="nextPair" class="bg-red-600 text-white px-4 py-2 rounded-md yt-button">Next Videos</button>
    </section>

    <!-- Modal -->
    <div id="videoModal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden">
      <div id="videoOverlay" class="absolute top-0 left-0 w-full h-full z-50 hidden bg-black bg-opacity-60 cursor-pointer">
        <img id="overlayThumbnail" class="w-full h-full object-cover opacity-80" />
      </div>

      <div class="relative w-full h-full flex flex-col">
        <div class="flex justify-end p-2 absolute top-0 right-0 z-10">
          <button id="closeModal" class="text-white text-2xl hover:text-gray-300">Ã—</button>
        </div>
        <iframe id="videoPlayer" class="w-full h-full" frameborder="0" allow="autoplay; encrypted-media; fullscreen" allowfullscreen></iframe>
      </div>
    </div>
  </main>

  <!-- JavaScript -->
  <script>
    const defaultVideoLinks = <%- JSON.stringify(videoLinks) %>;
    let videoLinks = JSON.parse(localStorage.getItem('videoLinks')) || defaultVideoLinks;
    localStorage.setItem('videoLinks', JSON.stringify(videoLinks));

    let currentPair = 0;

    function getYouTubeID(url) {
      const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]{11}).*/;
      const match = url.match(regExp);
      return (match && match[2]) ? match[2] : null;
    }

    async function checkIfEmbeddable(videoId) {
      try {
        const res = await fetch(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`);
        if (!res.ok) throw new Error("Video cannot be embedded.");
        return true;
      } catch {
        return false;
      }
    }

    async function updateThumbnails() {
      const startIndex = currentPair * 2 + 1;
      for (let i = 1; i <= 2; i++) {
        const thumbnail = document.getElementById(`thumbnail${i}`);
        const videoIndex = startIndex + i - 1;
        const videoUrl = videoLinks[`video${videoIndex}`];
        const videoId = getYouTubeID(videoUrl);
        if (videoId && await checkIfEmbeddable(videoId)) {
          thumbnail.innerHTML = `<img src="https://img.youtube.com/vi/${videoId}/hqdefault.jpg" class="w-full h-full object-cover">`;
        } else {
          thumbnail.innerHTML = `Thumbnail ${videoIndex}`;
        }
        thumbnail.dataset.videoIndex = videoIndex;
      }
    }

    updateThumbnails();

    document.getElementById('videoForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      for (let i = 1; i <= 6; i++) {
        const url = document.getElementById(`video${i}`).value;
        const videoId = getYouTubeID(url);
        if (videoId && !(await checkIfEmbeddable(videoId))) {
          alert(`Video ${i} cannot be embedded. Please choose another video.`);
          return;
        }
        videoLinks[`video${i}`] = url || defaultVideoLinks[`video${i}`];
      }
      localStorage.setItem('videoLinks', JSON.stringify(videoLinks));
      await updateThumbnails();
      document.getElementById('videoFormSection').classList.add('hidden');
      alert('Video links updated!');
    });

    document.getElementById('toggleForm').addEventListener('click', () => {
      document.getElementById('videoFormSection').classList.toggle('hidden');
    });

    document.getElementById('nextPair').addEventListener('click', () => {
      currentPair = (currentPair + 1) % 3;
      updateThumbnails();
    });

    for (let i = 1; i <= 2; i++) {
      document.getElementById(`thumbnail${i}`).addEventListener('click', async () => {
        const videoIndex = document.getElementById(`thumbnail${i}`).dataset.videoIndex;
        const videoUrl = videoLinks[`video${videoIndex}`];
        const videoId = getYouTubeID(videoUrl);
        if (videoId && await checkIfEmbeddable(videoId)) {
          const player = document.getElementById('videoPlayer');
          const modal = document.getElementById('videoModal');
          player.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&loop=1&playlist=${videoId}&modestbranding=1&rel=0&controls=1&fs=1`;
          modal.classList.remove('hidden');
          document.body.style.overflow = 'hidden'; // Prevent scrolling
        } else {
          alert("This video cannot be embedded.");
        }
      });
    }

    document.getElementById('closeModal').addEventListener('click', () => {
      document.getElementById('videoModal').classList.add('hidden');
      document.getElementById('videoPlayer').src = '';
      document.body.style.overflow = ''; // Restore scrolling
      if (document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {
        if (document.exitFullscreen) document.exitFullscreen();
        else if (document.webkitExitFullscreen) document.webkitExitFullscreen();
        else if (document.msExitFullscreen) document.msExitFullscreen();
      }
    });

    window.addEventListener("message", (event) => {
      try {
        const data = JSON.parse(event.data);
        const overlay = document.getElementById("videoOverlay");
        const thumbnail = document.getElementById("overlayThumbnail");
        const player = document.getElementById("videoPlayer");
        const videoId = getYouTubeID(player.src);

        if (!videoId) return;

        if (data.event === "onStateChange") {
          switch (data.info) {
            case 2: // paused
            case 0: // ended
              overlay.classList.remove("hidden");
              thumbnail.src = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;
              break;
            case 1: // playing
              overlay.classList.add("hidden");
              break;
            case -1: // unstarted
            case 5: // cued
              overlay.classList.remove("hidden");
              thumbnail.src = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;
              break;
          }
        }
      } catch (e) {
        console.warn("Video event error", e);
      }
    });

    document.getElementById("videoOverlay").addEventListener("click", () => {
      const player = document.getElementById("videoPlayer");
      player.contentWindow.postMessage(JSON.stringify({
        event: "command",
        func: "playVideo",
        args: []
      }), "*");
    });

    async function searchYouTube() {
      const query = document.getElementById('searchInput').value.trim();
      const resultsDiv = document.getElementById('searchResults');
      resultsDiv.innerHTML = "";

      if (!query) {
        alert("Please enter a search term.");
        return;
      }

      try {
        const res = await fetch('/api/search', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query })
        });

        const data = await res.json();
        if (data.error) return alert(data.error);

        for (const video of data.results) {
          if (await checkIfEmbeddable(video.videoId)) {
            const div = document.createElement('div');
            div.className = "flex gap-4 border rounded p-3 hover:bg-gray-100";
            div.innerHTML = `
              <img src="${video.thumbnail}" class="w-32 h-20 object-cover rounded" />
              <div class="flex flex-col">
                <strong class="text-gray-800">${video.title}</strong>
                <span class="text-sm text-gray-500">https://youtu.be/${video.videoId}</span>
                <button onclick="assignToSlot('${video.videoId}')" class="mt-2 bg-green-600 text-white px-3 py-1 rounded text-sm w-fit">Assign to Slot</button>
              </div>
            `;
            resultsDiv.appendChild(div);
          }
        }
      } catch (e) {
        alert("Search failed.");
        console.error(e);
      }
    }

    async function assignToSlot(videoId) {
      const isEmbeddable = await checkIfEmbeddable(videoId);
      if (!isEmbeddable) {
        alert("This video cannot be embedded. Please choose another one.");
        return;
      }

      const slot = document.getElementById("targetSlot").value;
      const input = document.getElementById(slot);
      const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;

      if (input) {
        input.value = videoUrl;
        videoLinks[slot] = videoUrl;
        localStorage.setItem("videoLinks", JSON.stringify(videoLinks));

        document.getElementById("searchInput").value = "";
        document.getElementById("searchResults").innerHTML = "";

        await updateThumbnails();

        alert(`Assigned to ${slot} successfully.`);
      }
    }
  </script>
</body>
</html>