<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Users</title>
    <link rel="icon" href="/favicon.ico" type="image/png">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.0.3"></script>
</head>
<body class="bg-gray-900 flex items-center justify-center min-h-screen text-white">
    
    <nav class="bg-gray-900 text-white p-4 shadow-lg fixed top-0 left-0 right-0 z-50">
        <div class="container mx-auto flex flex-wrap justify-between items-center">
            <a href="/" class="text-lg font-bold">42_Friend</a>
            <div class="text-center">
                Active Users: <%= totalActiveUser %>
            </div>
            <div class="space-x-4 flex flex-wrap items-center">
                <a href="/about" class="hover:text-blue-400">About Me</a>
                <a href="/" class="hover:text-blue-400">Home</a>
                <a href="/profile" class="hover:text-blue-400">Profile</a>
                <a href="/logout" class="text-red-400 hover:text-red-600">Logout</a>
                <a href="https://github.com/rameshtim/42_friend" target="_blank" 
                    class="bg-gray-800 px-4 py-2 rounded-lg flex items-center hover:bg-blue-500 transition">
                    <i class="ph ph-github-logo text-xl mr-2"></i>Contribute
                </a>
            </div>
        </div>
    </nav>

    <div class="pt-20 w-full max-w-4xl px-4">
        <div class="flex flex-col items-center w-full">
            <h1 class="text-2xl font-bold mb-4 text-center">All Users</h1>

            <!-- Sort Buttons -->
            <div class="flex flex-wrap gap-2 mb-4 justify-center">
                <button id="showAll" class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-md transition">
                    Show All
                </button>
                <button id="showOnline" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition">
                    Online Only
                </button>
                <button id="showOffline" class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition">
                    Offline Only
                </button>
                <button id="sortAsc" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition">
                    Level â†‘
                </button>
                <button id="sortDesc" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition">
                    Level â†“
                </button>
            </div>

            <!-- Progress bar for loading -->
            <div id="progressBar" class="w-full max-w-3xl mb-4 hidden">
                <div class="relative pt-1">
                    <div class="flex mb-2 items-center justify-between">
                        <div>
                            <span class="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-400 bg-blue-900">
                                Fetching Users...
                            </span>
                        </div>
                    </div>
                    <div class="overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-700">
                        <div id="progressBarFill" style="width: 0%" class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500 transition-all duration-500"></div>
                    </div>
                </div>
            </div>
            <div>
                Total Searched Students: <span id="totalActiveUsers">0</span>
            </div>
            <div id="imageSection1" class="hidden text-center text-gray-400 mt-6">
                <p class="text-xl">ðŸ˜¢ Stopped fetching Users.</p>
            </div>

            <!-- Logged-in user's position -->
            <div id="loggedInUserSection" class="w-full max-w-3xl mb-4"></div>

            <!-- User list -->
            <ul class="w-full max-w-3xl space-y-4 overflow-x-auto" id="userList">
                <!-- Users will be appended here dynamically -->
            </ul>

            <!-- Empty state -->
            <div id="imageSection" class="hidden text-center text-gray-400 mt-6">
                <p class="text-xl">ðŸ˜¢ No users found.</p>
                <img src="/empty_classroom.avif" 
                     alt="Empty classroom with computers" 
                     class="mx-auto mt-4 rounded-lg shadow-lg">
            </div>
        </div>
    </div>

    <script>
        const loggedUser = "<%= user.username %>"; // Pass the logged-in username from the backend
        let allUsers = [];
        let currentFilter = 'all'; // 'all', 'online', or 'offline'
        let currentSort = 'desc'; // 'asc' or 'desc'
        const userList = document.getElementById("userList");
        const loggedInUserSection = document.getElementById("loggedInUserSection");
        const imageSection = document.getElementById("imageSection");
        const imageSection1 = document.getElementById("imageSection1");
        const totalActiveUsers = document.getElementById("totalActiveUsers");
        const progressBar = document.getElementById("progressBar");
        const progressBarFill = document.getElementById("progressBarFill");

        // Start SSE connection on page load
        window.addEventListener("load", () => {
            const urlParams = new URLSearchParams(window.location.search);
            const type = urlParams.get('type') || 'campus'; // Default to 'campus' if not specified

            const sseEndpoint = type === 'pisciners' ? '/stream-piscine-users' : '/stream-users-campus';
            const source = new EventSource(sseEndpoint);
            // Show progress bar when fetching starts
            progressBar.classList.remove("hidden");

            // Simulate progress (since we don't know the total pages upfront)
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += 5; // Increment progress gradually
                if (progress > 90) progress = 90; // Cap at 90% until fetching completes
                progressBarFill.style.width = `${progress}%`;
            }, 1000);

            source.addEventListener("users", (event) => {
                const users = JSON.parse(event.data);
                allUsers = allUsers.concat(users); // Add new users to the list
                
                // Update total active users
                totalActiveUsers.textContent = allUsers.length;
                renderUserList();

                // Hide empty state if there are users
                if (allUsers.length > 0) {
                    imageSection.classList.add("hidden");
                }
            });

            source.addEventListener("end", () => {
                console.log("Finished fetching users");
                progressBar.classList.add("hidden");
                clearInterval(progressInterval);
                progressBarFill.style.width = "100%"; // Complete the progress bar
                if (allUsers.length === 0) {
                    imageSection.classList.remove("hidden");
                }
                source.close();
            });

            source.addEventListener("limit", (event) => {
                console.log("Page limit reached");
                progressBar.classList.add("hidden");
                clearInterval(progressInterval);
                progressBarFill.style.width = "100%";
                imageSection1.classList.remove("hidden");
                imageSection1.innerHTML = `<p class="text-xl text-red-400">${event.data}</p>`;
                source.close();
            });

            source.addEventListener("error", (event) => {
                console.error("Error:", event.data);
                progressBar.classList.add("hidden");
                clearInterval(progressInterval);
                progressBarFill.style.width = "100%";
                imageSection1.classList.remove("hidden");
                imageSection1.innerHTML = `<p class="text-xl text-red-400">Error: ${event.data}</p>`;
                source.close();
            });

            source.onerror = () => {
                console.error("SSE connection error");
                progressBar.classList.add("hidden");
                clearInterval(progressInterval);
                progressBarFill.style.width = "100%";
                imageSection1.classList.remove("hidden");
                imageSection1.innerHTML = `<p class="text-xl text-red-400">Connection lost. Please try again.</p>`;
                source.close();
            };

            // Sort button event listeners
            document.getElementById('showAll').addEventListener('click', () => {
                currentFilter = 'all';
                renderUserList();
            });

            document.getElementById('showOnline').addEventListener('click', () => {
                currentFilter = 'online';
                renderUserList();
            });

            document.getElementById('showOffline').addEventListener('click', () => {
                currentFilter = 'offline';
                renderUserList();
            });

            document.getElementById('sortAsc').addEventListener('click', () => {
                currentSort = 'asc';
                renderUserList();
            });

            document.getElementById('sortDesc').addEventListener('click', () => {
                currentSort = 'desc';
                renderUserList();
            });
        });

        // Function to update the logged-in user's section
        function updateLoggedInUser(loggedInUser, index) {
                loggedInUserSection.innerHTML = `
                    <div class="flex items-center justify-between bg-blue-800 p-4 rounded-lg shadow-md">
                        <div class="flex items-center space-x-4">
                            <span class="text-lg font-bold text-yellow-400">#${index + 1}</span>
                            <span class="w-4 h-4 rounded-full" 
                                  style="background-color: ${loggedInUser.location !== null ? 'green' : 'red'};"
                                  title="${loggedInUser.location !== null ? 'Online' : 'Offline'}">
                            </span>
                            <img src="${loggedInUser.image}" alt="Profile Picture" class="w-10 h-10 sm:w-12 sm:h-12 rounded-full">
                            <div class="text-center sm:text-left">
                                <h2 class="text-lg font-semibold">${loggedInUser.displayname} (You)</h2>
                                <p class="text-gray-400">@${loggedInUser.username}, Level: ${loggedInUser.level}</p>
                            </div>
                        </div>
                    </div>
                `;
        }

        // Function to append a user to the list
        function appendUser(user, index) {
            const li = document.createElement("li");
            li.className = "flex flex-col sm:flex-row items-center justify-between bg-gray-800 p-4 rounded-lg shadow-md user-item space-y-2 sm:space-y-0";
            li.dataset.username = user.username;
            li.innerHTML = `
                <div class="flex items-center space-x-4 user-link cursor-pointer" data-username="${user.username}">
                    <span class="text-lg font-bold text-gray-400">#${index + 1}</span>
                    <span class="w-4 h-4 rounded-full" 
                          style="background-color: ${user.location !== null ? 'green' : 'red'};"
                          title="${user.location !== null ? 'Online' : 'Offline'}">
                    </span>
                    <img src="${user.image}" alt="Profile Picture" class="w-10 h-10 sm:w-12 sm:h-12 rounded-full">
                    <div class="text-center sm:text-left">
                        <h2 class="text-lg font-semibold">${user.displayname}</h2>
                        <p class="text-gray-400">@${user.username}, Level: ${user.level}</p>
                    </div>
                </div>
                <div class="flex space-x-4 w-full sm:w-auto justify-center sm:justify-end">
                    <button onclick="openSlack('${user.username}')" 
                            class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-1.5 px-3 rounded-md text-sm shadow-sm transition w-full sm:w-auto">
                        DM on Slack
                    </button>
                    <button onclick="checkUserProfile('${user.username}', this)" 
                            class="bg-purple-500 hover:bg-purple-600 text-white font-medium py-1.5 px-3 rounded-md text-sm shadow-sm transition w-full sm:w-auto">
                        Check Projects
                    </button>
                    <div id="loadingIndicator" class="hidden text-center my-4 flex items-center space-x-2">
                        <div class="animate-spin rounded-full h-6 w-6 border-t-4 border-blue-500"></div>
                        <p class="text-gray-400">Loading Projects...</p>
                    </div>
                </div>
            `;
            userList.appendChild(li);

            // Re-attach event listeners for dynamically added user links
            li.querySelector(".user-link").addEventListener("click", () => {
                window.open(`https://profile.intra.42.fr/users/${user.username}`, '_blank', 'noopener,noreferrer');
            });
        }

        // Function to render the user list with filters and sorting
        function renderUserList() {
            // Sort users based on current sort direction
            allUsers.sort((a, b) => {
                return currentSort === 'desc' ? b.level - a.level : a.level - b.level;
            });

            // Clear current list
            userList.innerHTML = "";

            // Filter and render users
            let filteredUsers = allUsers.filter(user => {
                if (currentFilter === 'online') return user.location !== null;
                if (currentFilter === 'offline') return user.location === null;
                return true; // 'all'
            });

            filteredUsers.forEach((user, index) => {
                if (user.username === loggedUser) { // Skip the logged-in user
                    updateLoggedInUser(user, index);
                }
                appendUser(user, index);
            });

            // Update total users count based on filter
            totalActiveUsers.textContent = filteredUsers.length;

            // Show empty state if no users match filter
            if (filteredUsers.length === 0) {
                imageSection.classList.remove("hidden");
            } else {
                imageSection.classList.add("hidden");
            }
        }

        // Existing functions for Slack and project popup
        function openSlack(slackUsername) {
            const slackUrl = `https://42born2code.slack.com/team/selected_team_id=T039P7U66&u=${slackUsername}`;
            window.open(slackUrl, '_blank');
        }

        function checkUserProfile(username, button) {
            const loadingIndicator = button.parentElement.querySelector('#loadingIndicator');
            loadingIndicator.classList.remove("hidden");

            fetch("/check-user", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "include",
                body: JSON.stringify({ username })
            })
            .then(response => response.text())
            .then(html => {
                let parser = new DOMParser();
                let doc = parser.parseFromString(html, "text/html");
                let projectElements = doc.querySelectorAll("ul.mt-1.text-center li");

                loadingIndicator.classList.add("hidden");

                if (projectElements.length === 0) {
                    showPopupProj(button, "No active projects found.", false);
                    return;
                }

                let projectList = Array.from(projectElements).map(el => el.outerHTML).join("");
                let popupContent = `
                    <div class="mt-2 p-3 bg-gray-700 rounded-lg shadow-lg text-white w-64">
                        <h3 class="text-lg font-semibold text-center">Active Projects</h3>
                        <ul class="mt-2">${projectList}</ul>
                    </div>
                `;
                showPopupProj(button, popupContent, true);
            })
            .catch(error => {
                loadingIndicator.classList.add("hidden");
                showPopupProj(button, "Error fetching projects: " + error, false);
            });
        }

        function showPopupProj(button, content, isHTML = false) {
            document.querySelectorAll(".profile-popup").forEach(el => el.remove());

            let popup = document.createElement("div");
            popup.className = "absolute profile-popup bg-gray-800 text-white p-3 rounded-lg shadow-lg";
            popup.style.position = "absolute";
            popup.style.top = `${button.offsetTop - 60}px`;
            popup.style.left = `${button.offsetLeft}px`;

            let closeButton = document.createElement("button");
            closeButton.innerHTML = "X";
            closeButton.className = "absolute top-1 right-1 text-red-500 hover:text-red-700 font-bold text-xl p-2 rounded-full bg-gray-700 bg-opacity-50";
            closeButton.onclick = function() {
                popup.remove();
            };

            if (isHTML) {
                popup.innerHTML = content;
            } else {
                popup.innerText = content;
            }

            popup.appendChild(closeButton);
            button.parentNode.appendChild(popup);

            let timeoutId = setTimeout(() => popup.remove(), 50000);
            closeButton.onclick = function() {
                clearTimeout(timeoutId);
                popup.remove();
            };
        }
    </script>
</body>
</html>